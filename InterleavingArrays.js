// Create a function, that accepts an arbitrary number of arrays and returns a single array generated by alternately appending elements from the passed in arguments. If one of them is shorter than the others, the result should be padded with empty elements.

// Examples:

// interleave([1, 2, 3], ["c", "d", "e"]) === [1, "c", 2, "d", 3, "e"]
// interleave([1, 2, 3], [4, 5]) === [1, 4, 2, 5, 3, null]
// interleave([1, 2, 3], [4, 5, 6], [7, 8, 9]) === [1, 4, 7, 2, 5, 8, 3, 6, 9]
// interleave([]) === []

function interleave() {

    let result = [];
    // combine all args into one arr
    let allArrays = [...arguments];
    //  get a length of an array
    let avLength = allArrays.map((arr) => arr.length).reduce((a, b) => Math.max(a, b));
    // build a recursion and push values using their index by looping through a main array
    let index = 0;
    function alternate(arr) {
        if (index > avLength - 1) return;

        for (let i = 0; i < arr.length; i++) {
            if (arr[i][index] === undefined) {
                result.push(null)
            } else {
                result.push(arr[i][index])
            }

        };
        index++;
        alternate(allArrays);
    };
    alternate(allArrays);
    return result;
}